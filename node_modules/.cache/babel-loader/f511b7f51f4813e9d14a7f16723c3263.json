{"ast":null,"code":"var _jsxFileName = \"/media/jaam/E8BE2D48BE2D109C/my project/google-calendar/src/components/GoogleCalendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport googleCalendarPlugin from '@fullcalendar/google-calendar';\nimport { Tooltip } from \"bootstrap\";\nimport { Modal } from \"reactstrap\"; // import { Toolti/p } from \"bootstrap\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = \"800666244265-lto1ep2f97vs2ts40omitb1ko1ckjq8v.apps.googleusercontent.com\";\nconst API_KEY = \"AIzaSyCfAHxZMKrG-t6CBNDfU9DHyXb6fNtL2xw\"; // Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\n\nconst SCOPES = \"https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/calendar.events https://www.googleapis.com/auth/calendar\";\n\nconst GoogleCalendar = () => {\n  _s();\n\n  const [login, setLogin] = useState(false);\n  const [events, setEvents] = useState(null);\n  const [event, setEvent] = useState(null);\n  const [model, setModel] = useState(false);\n  useEffect(() => {\n    // Update the document title using the browser API\n    const script = document.createElement(\"script\");\n    script.async = true;\n    script.defer = true;\n    script.src = \"https://apis.google.com/js/api.js\";\n    document.body.appendChild(script);\n    script.addEventListener(\"load\", () => {\n      if (window.gapi) handleClientLoad();\n    });\n  });\n\n  const signin = () => {\n    setLogin(true);\n  };\n\n  const openSignInPopup = () => {\n    window.gapi.auth2.authorize({\n      client_id: CLIENT_ID,\n      scope: SCOPES\n    }, res => {\n      console.log(res);\n\n      if (res) {\n        console.log(window.gapi.client, res);\n        if (res.access_token) localStorage.setItem(\"access_token\", res.access_token);\n        fetch(`https://www.googleapis.com/calendar/v3/users/me/calendarList?access_token=${res.access_token}`).then(res => res.json()).then(data => localStorage.setItem(\"calendarId\", data.items[0].id));\n        window.gapi.client.load(\"calendar\", \"v3\", listUpcomingEvents);\n      }\n    });\n  };\n  /**\n   *  On load, called to load the auth2 library and API client library.\n   */\n\n\n  const handleClientLoad = () => {\n    window.gapi.load(\"client:auth2\", initClient);\n  };\n  /**\n   *  Initializes the API client library and sets up sign-in state\n   *  listeners.\n   */\n\n\n  const initClient = () => {\n    if (!localStorage.getItem(\"access_token\")) {\n      openSignInPopup();\n    } else {\n      fetch(`https://www.googleapis.com/calendar/v3/calendars/primary/events?key=${API_KEY}&orderBy=startTime&singleEvents=true`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`\n        }\n      }).then(res => {\n        if (res.status !== 401) {\n          return res.json();\n        } else {\n          localStorage.removeItem(\"access_token\");\n          openSignInPopup();\n        }\n      }).then(data => {\n        if (data === null || data === void 0 ? void 0 : data.items) {\n          console.log(\"my data\", data.items);\n          setEvents(formatEvents(data.items));\n        }\n      });\n    }\n  };\n  /**\n   * Print the summary and start datetime/date of the next ten events in\n   * the authorized user's calendar. If no events are found an\n   * appropriate message is printed.\n   */\n\n\n  const listUpcomingEvents = () => {\n    window.gapi.client.calendar.events.list({\n      calendarId: \"primary\",\n      // timeMin: new Date().toISOString(),\n      showDeleted: true,\n      singleEvents: true // maxResults: 10,\n      // orderBy: \"startTime\",\n\n    }).then(function (response) {\n      var events = response.result.items;\n      console.log(events);\n\n      if (events.length > 0) {\n        setEvents(formatEvents(events));\n      }\n    });\n  };\n\n  const formatEvents = list => {\n    return list.map(item => ({\n      title: item.summary,\n      disc: item.description,\n      start: item.start.dateTime || item.start.date,\n      end: item.end.dateTime || item.end.date\n    }));\n  }; // const inputdata =()=>{\n  //     let dateStr = prompt('Enter a date in YYYY-MM-DD format');\n  //     let date = new Date(dateStr + 'T00:00:00'); // will be in local time\n  // }\n\n\n  const addEvent = () => {\n    if (window.gapi.client || localStorage.getItem(\"access_token\")) {\n      let today = new Date();\n      var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]; // let dateStr = prompt('Enter a start date ');\n\n      var dateStr = prompt(\"Please enter date.\", today.getDate() + \"-\" + monthNames[today.getMonth()] + \"-\" + today.getFullYear());\n      let dateEnd = prompt('Enter a end date');\n      let title = prompt('Enter title');\n      let description = prompt('Enter disc');\n      fetch(`https://www.googleapis.com/calendar/v3/calendars/primary/events?key=${API_KEY}&timeMax=${new Date(\"Apr 01, 2021\").toISOString()}&timeMin=${new Date(\"Apr 01, 2021\").toISOString()}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`\n        }\n      }).then(res => res.json()).then(data => console.log(data));\n      fetch(`https://www.googleapis.com/calendar/v3/calendars/primary/events?key=${API_KEY}`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`\n        },\n        body: JSON.stringify({\n          end: {\n            dateTime: new Date(dateEnd)\n          },\n          start: {\n            dateTime: new Date(dateStr)\n          },\n          summary: title,\n          description: description\n        })\n      });\n    }\n  };\n\n  const toggle = () => {\n    setModel(!model);\n  };\n\n  const handleEventClick = ({\n    event,\n    el\n  }) => {\n    toggle();\n    setEvent({\n      event\n    });\n  };\n\n  const eventRender = info => {\n    var tooltip = new Tooltip(info.el, {\n      title: info.event.extendedProps.description,\n      placement: 'top',\n      trigger: 'hover',\n      container: 'body'\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [login && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addEvent,\n      children: \"Add event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: signin,\n      children: \"signen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, googleCalendarPlugin],\n      initialView: \"dayGridMonth\",\n      events: events,\n      eventRender: eventRender,\n      GoogleCalendarApikey: API_KEY,\n      eventClick: handleEventClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: model,\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"my eventes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GoogleCalendar, \"jfgh/QdK4AngjvwgNSu2mU3nZpE=\");\n\n_c = GoogleCalendar;\nexport default GoogleCalendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleCalendar\");","map":{"version":3,"sources":["/media/jaam/E8BE2D48BE2D109C/my project/google-calendar/src/components/GoogleCalendar.js"],"names":["React","useEffect","useState","FullCalendar","dayGridPlugin","googleCalendarPlugin","Tooltip","Modal","CLIENT_ID","API_KEY","SCOPES","GoogleCalendar","login","setLogin","events","setEvents","event","setEvent","model","setModel","script","document","createElement","async","defer","src","body","appendChild","addEventListener","window","gapi","handleClientLoad","signin","openSignInPopup","auth2","authorize","client_id","scope","res","console","log","client","access_token","localStorage","setItem","fetch","then","json","data","items","id","load","listUpcomingEvents","initClient","getItem","headers","Authorization","status","removeItem","formatEvents","calendar","list","calendarId","showDeleted","singleEvents","response","result","length","map","item","title","summary","disc","description","start","dateTime","date","end","addEvent","today","Date","monthNames","dateStr","prompt","getDate","getMonth","getFullYear","dateEnd","toISOString","method","JSON","stringify","toggle","handleEventClick","el","eventRender","info","tooltip","extendedProps","placement","trigger","container"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport googleCalendarPlugin from '@fullcalendar/google-calendar';\nimport { Tooltip } from \"bootstrap\";\n\nimport { Modal } from \"reactstrap\";\n\n// import { Toolti/p } from \"bootstrap\";\n\nconst CLIENT_ID =\n  \"800666244265-lto1ep2f97vs2ts40omitb1ko1ckjq8v.apps.googleusercontent.com\";\nconst API_KEY = \"AIzaSyCfAHxZMKrG-t6CBNDfU9DHyXb6fNtL2xw\";\n\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nconst SCOPES =\n  \"https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/calendar.events https://www.googleapis.com/auth/calendar\";\n\nconst GoogleCalendar = () => {\n  const [login ,setLogin] = useState(false);\n  const [events, setEvents] = useState(null);\n  const [event, setEvent] = useState(null);\n  const [model, setModel] = useState(false)\n\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    const script = document.createElement(\"script\");\n    script.async = true;\n    script.defer = true;\n    script.src = \"https://apis.google.com/js/api.js\";\n\n    document.body.appendChild(script);\n\n    script.addEventListener(\"load\", () => {\n      if (window.gapi) handleClientLoad();\n     \n    });  });\n  const signin=()=>{\n    setLogin(true)\n  }\n\n  const openSignInPopup = () => {\n    window.gapi.auth2.authorize(\n      { client_id: CLIENT_ID, scope: SCOPES },\n      (res) => {\n        console.log(res);\n        if (res) {\n          console.log(window.gapi.client, res);\n\n          if (res.access_token)\n            localStorage.setItem(\"access_token\", res.access_token);\n\n          fetch(\n            `https://www.googleapis.com/calendar/v3/users/me/calendarList?access_token=${res.access_token}`\n          )\n            .then((res) => res.json())\n            .then((data) =>\n              localStorage.setItem(\"calendarId\", data.items[0].id)\n            );\n\n          window.gapi.client.load(\"calendar\", \"v3\", listUpcomingEvents);\n        }\n      }\n    );\n  };\n\n  /**\n   *  On load, called to load the auth2 library and API client library.\n   */\n  const handleClientLoad = () => {\n    window.gapi.load(\"client:auth2\", initClient);\n  };\n\n  /**\n   *  Initializes the API client library and sets up sign-in state\n   *  listeners.\n   */\n  const initClient = () => {\n    if (!localStorage.getItem(\"access_token\")) {\n      openSignInPopup();\n    } else {\n      fetch(\n        `https://www.googleapis.com/calendar/v3/calendars/primary/events?key=${API_KEY}&orderBy=startTime&singleEvents=true`,\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`,\n          },\n        }\n      )\n        .then((res) => {\n          if (res.status !== 401) {\n            return res.json();\n          } else {\n            localStorage.removeItem(\"access_token\");\n\n            openSignInPopup();\n          }\n        })\n        .then((data) => {\n          if (data?.items) {\n            console.log(\"my data\",data.items);\n            setEvents(formatEvents(data.items));\n\n          }\n        });\n\n    }\n\n  };\n\n  /**\n   * Print the summary and start datetime/date of the next ten events in\n   * the authorized user's calendar. If no events are found an\n   * appropriate message is printed.\n   */\n  const listUpcomingEvents = () => {\n    window.gapi.client.calendar.events\n      .list({\n        calendarId: \"primary\",\n        // timeMin: new Date().toISOString(),\n        showDeleted: true,\n        singleEvents: true,\n        // maxResults: 10,\n        // orderBy: \"startTime\",\n      })\n      .then(function (response) {\n        var events = response.result.items;\n\n        console.log(events);\n\n        if (events.length > 0) {\n          setEvents(formatEvents(events));\n        }\n      });\n  };\n\n  const formatEvents = (list) => {\n    return list.map((item) => ({\n      title: item.summary,\n      disc: item.description,\n      start: item.start.dateTime || item.start.date,\n      end: item.end.dateTime || item.end.date,\n    }));\n  };\n\n  // const inputdata =()=>{\n  //     let dateStr = prompt('Enter a date in YYYY-MM-DD format');\n  //     let date = new Date(dateStr + 'T00:00:00'); // will be in local time\n\n  // }\n\n  const addEvent = () => {\n\n    \n    if (window.gapi.client || localStorage.getItem(\"access_token\")) {\n      let today = new Date();\n      var monthNames = [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ];\n      // let dateStr = prompt('Enter a start date ');\n    var dateStr = prompt(\"Please enter date.\", today.getDate()+\"-\"+monthNames[today.getMonth()]+\"-\"+today.getFullYear());\n      let dateEnd = prompt('Enter a end date');\n      let title = prompt('Enter title');\n      let description = prompt('Enter disc');\n      fetch(\n        `https://www.googleapis.com/calendar/v3/calendars/primary/events?key=${API_KEY}&timeMax=${new Date(\n          \"Apr 01, 2021\"\n        ).toISOString()}&timeMin=${new Date(\"Apr 01, 2021\").toISOString()}`,\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`,\n          },\n        }\n      )\n        .then((res) => res.json())\n        .then((data) => console.log(data));\n        fetch(\n          `https://www.googleapis.com/calendar/v3/calendars/primary/events?key=${API_KEY}`,\n          {\n            method: \"POST\",\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`,\n            },\n            body: JSON.stringify({\n              end: {\n                dateTime: new Date(dateEnd),\n              },\n              start: {\n                dateTime: new Date(dateStr),\n              },\n              summary: title,\n              description: description,\n            }),\n          }\n        );\n    }\n  };\n\n  const toggle = () => {\n    setModel(!model);\n  };\n\n  const handleEventClick = ({ event, el }) => {\n    toggle();\n    setEvent({ event });\n  };\n\n  const eventRender=(info)=>{\n    var tooltip = new Tooltip(info.el, {\n      title: info.event.extendedProps.description,\n      placement: 'top',\n      trigger: 'hover',\n      container: 'body'\n    });\n  }\n\n\n  return (\n    <>\n    {login && <button onClick={addEvent}>Add event</button>}\n      <button onClick={signin}>signen</button>\n      <FullCalendar\n        plugins={[dayGridPlugin,googleCalendarPlugin]}\n        initialView=\"dayGridMonth\"\n        events={events}\n        eventRender={eventRender}\n        GoogleCalendarApikey={API_KEY}\n        eventClick={handleEventClick}\n\n        \n      />\n\n  <Modal \n    isOpen={model}\n  >\n<h1>my eventes</h1>\n  </Modal>\n    </>\n  );\n};\n\nexport default GoogleCalendar;\n"]},"metadata":{},"sourceType":"module"}